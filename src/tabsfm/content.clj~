(ns tabsfm.content
  (:use [tabsfm.lastfm]
	[tabsfm.templates]
	[tabsfm.util]
	[clj-time.core]
	[clj-time.format]
	[hiccup :only [html]]))

(def lipsum
     "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras luctus ligula et ipsum suscipit ut pharetra metus luctus. Duis vestibulum arcu in diam sollicitudin vulputate. Cras rhoncus consectetur mauris, sit amet molestie nisi volutpat sit amet. Cras dictum, tortor ac auctor feugiat, sapien ante elementum risus, ut placerat mi mauris at quam. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque bibendum eros at lectus congue non sodales lectus auctor. Nulla aliquet tortor id felis placerat tincidunt. Cras et mauris fringilla risus vestibulum tristique a ut eros. Integer sit amet ante sit amet odio laoreet faucibus sed id nisi. Proin lacus lorem, feugiat vel euismod sit amet, facilisis sed quam. In sed nulla quam. Vivamus interdum, mauris id consectetur varius, velit augue fringilla urna, quis dignissim quam est sit amet leo. Fusce est lacus, viverra in dictum in, dapibus vitae sapien. Phasellus eleifend magna eros, ac faucibus arcu. Mauris nisi libero, rutrum laoreet egestas sed, consectetur a dolor. Ut lobortis sapien eget turpis dictum non egestas odio mattis. Duis vehicula faucibus eros id accumsan.")

   

(def widgets
     (list
         (struct-map section
           :title ""
	   :body (fn [s p] [:p "Last.fm embedded radio"])
	   :section #{"tabs" "charts"}
	   :position :right)
      (struct-map section
	:title "New to Your Tab Library"
	:body (fn [session params]
		(html
		 [:p.alt "new tabs to your library"]
		 [:p lipsum]))
	:section "tabs")
      (struct-map section
	:title "Recommended Tabs"
	:body (fn [session params]
		[:ul
		 [:li "item one"]
		 [:li "item two"]
		 [:li "item three"]])
	:section "tabs")
      (struct-map section
	:title  "Recently Viewed Tabs"
	:body (fn [s p]
		[:p "Want more, eh?"])
	:section "tabs")
      (struct-map section
	:title "Recently Scrobbled Tabs"
	:body  (fn [s p]
		 [:ol
		  [:li "item one"]
		  [:li "item two"]
		  [:li "item three"]])
	:section "tabs")
      (struct-map section
	:title "Top Artists"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"overview" "artist"})
      (struct-map section
	:title "Most Jammed"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"artist" "track"}
	:position :right)
      (struct-map section
	:title "Top Tracks"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"overview" "track"})
      (struct-map section
	:title "Hyped Artists"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"overview" "hyped-artist"}
	:position {"overview" :right
		   "hyped-artist" :left})
      (struct-map section
	:title "Hyped Tracks"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"overview" "hyped-track"}
	:position {"overview" :right
		   "hyped-track" :left})
      (struct-map section
	:title "Loved Tracks"
	:body (fn [s p] [:div])
	:section "charts"
	:subsection #{"overview" "loved"}
	:position {"overview" :right
		   "loved" :left})
      (struct-map section
	:title "Debug"
	:body (fn [session params]
		(html
		 [:p (str session)]
		 [:p (str params)]))
	:position :right
	:auth-level :admin)
      (struct-map section
	:title "Jam Feed"
	:body  (fn [s p]
		 [:ul
		  [:li [:a {:ahref "#"} "item one"]]
		  [:li [:a {:ahref "#"} "item two"]]
		  [:li [:a {:ahref "#"} "item three"]]])
	:section "tabs"
	:position :right)))

(def sections {})
	       
(def sections
  {"tabs"     (struct section
		      ""
		      (fn [session params]
			(widget-section session params widgets)))
   "songbook" (struct-map section
		      :title "Songbook"
		      :body (fn [session params]
			      (let [user (session :lastfm-user)
				    logged-in (and (:username user)
						   (:key user))]
				(if logged-in
				  (tabbed-section session params
						  (list
						   (struct section
							   "Library"
							   "library")
						   (struct section
							   "Favorite Tracks"
							   "favorites")
						   (struct section
							   "Songs in Gm"
							   "songs-in-gm"))
						  ((var sections) "songbook"))
				  (centered-section "All the songs you play, all in one place." [:p "Songbook is your own collection of the tracks you love, the tabs you've written, and chords you're still learning.  Search your library for the by tuning, key, artists, or &#8220;jam count&#8221; with Smart Songbooks."]))))
		      :subsections {"library" (struct section
						      (fn [session p]
							(str
							 (:username
							  (:lastfm-user session))
							 "'s Library"))
						      (fn [s p ]
							"library"))
				    "favorites" (struct section
							(fn [session p]
							  (str
							   (:username
							    (:lastfm-user session))
							   "'s Favorite Tracks"))
							(fn [s p]
							  "favorites"))
				    "songs-in-gm" (struct section
							  "Songs in Gm"
							  (fn [s p]
							    "smart songbook"))})
   "radio"    (struct section
		      "Radio"
		      (fn [s p]
			(centered-section 
			 "Jam along with your personalized Last.fm radio! "
			 [:p "flash embed and tabviewer"])))
   "charts"   (struct-map section
		:title "Charts"
		:body (fn [session params]
			(tabbed-section session params 
					(list
					 (struct section "Overview" "overview")
					 (struct section "Top Artists" "artist")
					 (struct section "Hyped Artists" "hyped-artist")
					 (struct section "Top Tracks" "track")
					 (struct section "Hyped Tracks" "hyped-track")
					 (struct section "Loved Tracks" "loved")) 
					((var sections) "charts")))
		:subsections
		(let [calendar-description-fn (fn [s p]
						(let [dt (now)
						      pastsun (minus dt (days (day-of-week dt)))
						      pastsun2 (minus pastsun (weeks 1))
						      fmt (formatter "dd-MM-YYYY")
						      datestr (str "For the week ending on "
								   (html
								    (get-calendar-html "enddate"
										       (unparse fmt pastsun))))]
						  datestr))
		      overview-description-fn (fn [s p]
						(let [dt (now)
						      pastsun (minus dt (days (day-of-week dt)))
						      pastsun2 (minus pastsun (weeks 1))
						      fmt (formatter "EEEE dd mmmm YYYY")
						      datestr (str "For the week of "
								   (unparse fmt pastsun2)
								   " to "
								   (unparse fmt pastsun))]
						  datestr))]
		  {"overview" (struct-map section
				:title "Overview"
				:long-title "Weekly Artist, Track, and Tab Charts"
				:description overview-description-fn
				:body (fn [session params] 
					(widget-subsection
					 session
					 params widgets)))
		   "artist"   (struct-map section
				:title "Top Artists"
				:description calendar-description-fn
				:body (fn [session params] 
					(widget-subsection
					 session
					 params widgets)))
		   "hyped-artist" (struct-map section 
				   :title  "Hyped Artists" 
				   :description calendar-description-fn
				   :body (fn [session params] 
					   (widget-subsection
					    session
					    params widgets)))
		   "track"       (struct-map section
				   :title "Top Tracks"
				   :description calendar-description-fn
				   :body (fn [session params] 
					   (widget-subsection
					    session
					    params widgets)))
		   "hyped-track"  (struct-map section
				   :title "Hyped Tracks"
				   :description calendar-description-fn
				   :body  (fn [session params] 
					   (widget-subsection
					    session
					    params widgets)))
		   "loved"       (struct-map section
				   :title "Loved Tracks"
				   :description calendar-description-fn
				   :body (fn [session params] 
					   (widget-subsection
					    session
					    params widgets)))}))
   "admin"    (struct section
		      "Admin"
		      (fn [s p]
			(full-section
			 [:p "not implemented yet"])))
   "logout"   (struct section
		      ""
		      (fn [s p]
			(centered-section
			 "Your Last.fm session has been discarded"
			 [:p "&#8220;later dude.&#8221;"])))
   "user-agreement"      (struct section
				 "User Agreement"
				 (fn [s p]
				   (centered-section
				    "User Agreement"
				    [:p "not implemented yet"])))
   "contact"  (struct section
		      "Contact Us"
		      (fn [s p]
			(centered-section
			 "Contact Us"
			 [:p "not implemented yet"])))
   
   "bummer"   (struct section
		      "404.  Say Wha?"
		      (fn [s p]
			(centered-section 
			 "404: There's nothing to see here..."
			 [:p "&#8220;total bummer dude.&#8221;"])))})
